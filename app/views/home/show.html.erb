<style>
  body {
    font: 400 15px/1.8 Lato, sans-serif;
    color: #777;
  }
  h3, h4 {
    margin: 10px 0 30px 0;
    letter-spacing: 10px;
    font-size: 20px;
    color: #111;
  }
  .container {
    padding: 80px 120px;
  }
  .person {
    border: 10px solid transparent;
    margin-bottom: 25px;
    width: 80%;
    height: 80%;
    opacity: 0.7;
  }
  .person:hover {
    border-color: #f1f1f1;
  }
  .carousel-inner img {
    -webkit-filter: grayscale(90%);
    filter: grayscale(90%); /* make all photos black and white */
    width: 100%; /* Set width to 100% */
    margin: auto;
  }
  .carousel-caption h3 {
    color: #fff !important;
  }
  @media (max-width: 600px) {
    .carousel-caption {
      display: none; /* Hide the carousel text when the screen is less than 600 pixels wide */
    }
  }
  .bg-1 {
    background: #2d2d30;
    color: #bdbdbd;
  }
  .bg-1 h3 {color: #fff;}
  .bg-1 p {font-style: italic;}
  .list-group-item:first-child {
    border-top-right-radius: 0;
    border-top-left-radius: 0;
  }
  .list-group-item:last-child {
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }
  .thumbnail {
    padding: 0 0 15px 0;
    border: none;
    border-radius: 0;
  }
  .thumbnail p {
    margin-top: 15px;
    color: #555;
  }
  .btn {
    padding: 10px 20px;
    background-color: #333;
    color: #f1f1f1;
    border-radius: 0;
    transition: .2s;
  }
  .btn:hover, .btn:focus {
    border: 1px solid #333;
    background-color: #fff;
    color: #000;
  }
  .modal-header, h4, .close {
    background-color: #333;
    color: #fff !important;
    text-align: center;
    font-size: 30px;
  }
  .modal-header, .modal-body {
    padding: 40px 50px;
  }
  .open .dropdown-toggle {
    color: #fff;
    background-color: #555 !important;
  }
  .dropdown-menu li a {
    color: #000 !important;
  }
  .dropdown-menu li a:hover {
    background-color: red !important;
  }
  footer {
    background-color: #2d2d30;
    color: #f5f5f5;
    padding: 32px;
  }
  footer a {
    color: #f5f5f5;
  }
  footer a:hover {
    color: #777;
    text-decoration: none;
  }
  .form-control {
    border-radius: 0;
  }

</style>
<style>
  #map {
    height: 100%;
  }
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  .controls {
    margin-top: 10px;
    border: 1px solid transparent;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    height: 32px;
    outline: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }

  #pac-input {
    background-color: #fff;
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 300px;
  }

  #pac-input:focus {
    border-color: #4d90fe;
  }

  .pac-container {
    font-family: Roboto;
  }

  #type-selector {
    color: #fff;
    background-color: #4d90fe;
    padding: 5px 11px 0px 11px;
  }

  #type-selector label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
  }

  #target {
    width: 345px;
  }
</style>
<script>
  function selectFromMap(id)
  {
    $('#'+id).modal('show');
    console.log(id);
  }
  var map;
  function selector() {
    var site = document.getElementById("zone_site_id").value;
    var http = new XMLHttpRequest();
    var url = "/sites/" + site + ".json";
    http.open("GET", url, true);
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    http.send("test");
    http.onreadystatechange = function () {
      if (http.readyState == 4 && http.status == 200) {
        responseJsonParse = JSON.parse(http.response);
        newLocation(parseFloat(responseJsonParse.Lat), parseFloat(responseJsonParse.Long));
      }
    }
  }
  function newLocation(newLat, newLng) {
    console.log(newLat);
    map.setCenter({
      lat: newLat,
      lng: newLng
    });
  }
  function initAutocomplete(response) {
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 14.079367, lng: 100.6096085},
      zoom: 16,
      mapTypeId: 'roadmap'
    });
    google.maps.event.addListener(map, 'click', function (event) {
      markers.push(new google.maps.Marker({
        map: map,
        title: event.name,
        position: event.latLng
      }));
    });
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    map.addListener('bounds_changed', function () {
      searchBox.setBounds(map.getBounds());
    });
//    var myLatLng = [];
//    var marker = [];
    var markers = [];
    var i = 0;
    <% @configs.each do |conf| %>
    var myLatLng = {lat: <%= conf.zone.Lat %>, lng: <%= conf.zone.Long %>};
    markers.push(new google.maps.Marker({
      map: map,
      title: '<%= conf.zone.name %>',
      position: myLatLng
    }));
    markers[i].addListener('click', function() {
      selectFromMap('<%= conf.id %>');
    });
    i++;
    <% end %>


    var markers = [];
    searchBox.addListener('places_changed', function () {
      var places = searchBox.getPlaces();
      if (places.length == 0) {
        return;
      }
      markers.forEach(function (marker) {
        marker.setMap(null);
      });

      markers = [marker];
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function (place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));
//        document.getElementById('site_name').value = place.name;
        if (place.geometry.viewport) {
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAyxD49sJePDuiXFWSMxlykH-z6x-Ki5qg&libraries=places&callback=initAutocomplete"
        async defer></script>

<% @configs.each do |conf| %>
    <div class="modal fade" id="<%= conf.id %>" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel"><%= conf.name %></h4>
          </div>
          <div class="modal-body">
            <div class="container-fluid well span6">
              <div class="row-fluid">
                    <span>
                    <h3><%= conf.name %></h3>
                      <h4>Total Number Of Parking Slots - <%= conf.zone.numberofslots %> </h4>
                      <h4>Total Number Of free Parking Slots - <%= @parkingtotal.where(zone_id: conf.zone).last.free %> </h4>

                  </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
<% end %>

<div class="center-block">
  <!--<img class="center-block"  src="assets/newfront.jpg" alt="banner" usemap="#navimap"/>-->

</div>


<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map" class="center-block" style="height:60%;width:100%"/>
</div>
<br/>
 <img class="center-block" width="100%" src="/assets/bannerbottom.png" alt="banner"/>





